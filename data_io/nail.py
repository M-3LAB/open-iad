import os
import json
import numpy as np
import cv2
from tqdm import tqdm
# from tools.utils import create_folders

__all__ = ['NAIL', '01']

def create_folders(tag_path):
    if not os.path.exists(tag_path):
        os.makedirs(tag_path)

def process(classes=['01'], clip_size=(1000, 1000)):
    for c in classes:
        img_src_folder = '/ssd2/m3lab/data/open-ad/nail/{}/src/anomaly/'.format(c)
        img_dst_folder = '/ssd2/m3lab/data/open-ad/nail/{}/dst/anomaly/'.format(c)
        mask_dst_folder = '/ssd2/m3lab/data/open-ad/nail/{}/dst/anomaly_mask/'.format(c)
        annotation_json_path = '/ssd2/m3lab/data/open-ad/nail/{}/src/via_project_6Dec2022_11h26m.json'.format(c)

        create_folders(img_dst_folder)
        create_folders(mask_dst_folder)

        # load json generated by VIA tool
        annotations = json.load(open(annotation_json_path, 'r'))
        imgs = annotations['_via_img_metadata']

        for i, imgId in enumerate(tqdm(imgs)):
            filename = imgs[imgId]['filename']
            regions = imgs[imgId]['regions']
            if len(regions) <= 0:
                continue
    
            # create new mask with all zeros
            image_path = os.path.join(img_src_folder, filename)
            image = cv2.imread(image_path)
            height, width = image.shape[:2]   
            mask_image = np.zeros((height, width), dtype=np.uint8)

            for region in regions:
                # capture attributes
                polygons = region['shape_attributes']

                countOfPoints = len(polygons['all_points_x'])
                points = [None] * countOfPoints
                for i in range(countOfPoints):
                    x = int(polygons['all_points_x'][i])
                    y = int(polygons['all_points_y'][i])
                    points[i] = [x, y]

                contours = np.array([points])
                mask_image = cv2.fillPoly(mask_image, contours, 255)

            # save src img
            img_resize = cv2.resize(image, clip_size)
            img_path = img_dst_folder + filename.replace('.JPG', '.jpg')
            cv2.imwrite(img_path, img_resize)

            # save mask
            img_resize = cv2.resize(mask_image, clip_size)
            img_path = mask_dst_folder + filename.replace('.JPG', '_mask.jpg')
            cv2.imwrite(img_path, img_resize)

if __name__ == '__main__':
    process()
